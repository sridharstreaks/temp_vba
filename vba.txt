Sub AutomateChromeWorkflow_AttachToRunningSession()
    Dim options As New ChromeOptions
    Dim bot As ChromeDriver
    Dim ws As Worksheet
    Dim lastRow As Long, i As Long
    Dim url As String
    Dim formElement As WebElement, saveButton As WebElement, savedConfirmation As WebElement
    Dim handles As Variant, newTabHandle As String
    
    ' --- STEP 1: Attach to an already running Chrome instance ---
    ' Make sure Chrome is started with the remote debugging port (e.g., 9222)
    options.DebuggerAddress = "127.0.0.1:9222"
    
    ' Create a new ChromeDriver instance using these options.
    Set bot = New ChromeDriver
    ' The following Start call attaches to the already running Chrome instance.
    bot.Start "chrome", options
    
    ' --- STEP 2: Open a new tab in the attached session ---
    bot.ExecuteScript "window.open('about:blank','_blank');"
    handles = bot.WindowHandles
    newTabHandle = handles(UBound(handles))
    bot.SwitchToWindow newTabHandle
    
    ' --- STEP 3: Process URLs from Excel ---
    ' Assume your Excel workbook has URLs in column A on "Sheet1" (row 1 header)
    Set ws = ThisWorkbook.Sheets("Sheet1")
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    For i = 2 To lastRow
        url = ws.Cells(i, "A").Value
        Debug.Print "Processing URL: " & url
        
        ' Navigate to the URL in the same tab.
        bot.Get url
        
        ' Wait for the page to load (adjust timing as needed).
        Application.Wait Now + TimeValue("0:00:05")
        
        ' --- STEP 4: Interact with the page ---
        ' Locate the target form element via XPath.
        On Error Resume Next
        Set formElement = bot.FindElementByXPath("//input[@id='formField']")
        On Error GoTo 0
        If formElement Is Nothing Then
            Debug.Print "Form element not found for URL: " & url
            ws.Cells(i, "B").Value = "error: form not found"
            GoTo NextUrl
        End If
        
        ' Clear existing text and enter the new text.
        formElement.Clear
        formElement.SendKeys "Your predefined text here"
        
        ' Locate the save button (adjust the XPath as needed).
        On Error Resume Next
        Set saveButton = bot.FindElementByXPath("//button[@id='saveButton']")
        On Error GoTo 0
        If saveButton Is Nothing Then
            Debug.Print "Save button not found for URL: " & url
            ws.Cells(i, "B").Value = "error: save button not found"
            GoTo NextUrl
        End If
        
        ' Click the save button.
        saveButton.Click
        
        ' Wait for a confirmation element that indicates the save was successful.
        Dim attempts As Integer: attempts = 0
        Do
            On Error Resume Next
            Set savedConfirmation = bot.FindElementByXPath("//div[@id='savedMessage']")
            On Error GoTo 0
            If Not savedConfirmation Is Nothing Then Exit Do
            
            Application.Wait Now + TimeValue("0:00:02")
            attempts = attempts + 1
            If attempts > 15 Then Exit Do  ' Timeout after ~30 seconds.
        Loop
        
        If savedConfirmation Is Nothing Then
            ws.Cells(i, "B").Value = "error: confirmation not found"
            Debug.Print "Confirmation not found for URL: " & url
        Else
            ws.Cells(i, "B").Value = "done"
            Debug.Print "URL processed successfully: " & url
        End If
        
NextUrl:
        ' Clean up element variables for next iteration.
        Set formElement = Nothing
        Set saveButton = Nothing
        Set savedConfirmation = Nothing
    Next i
    
    ' --- STEP 5: Cleanup ---
    ' Optionally, you can close the new tab if desired:
    ' bot.CloseWindow
    ' Switch back to the original window if needed.
    
    ' When finished, you may quit the driver (or leave Chrome running):
    bot.Quit
    ThisWorkbook.Save
    MsgBox "Automation complete!", vbInformation
End Sub
